from math import ceil, sqrt

def bsgs(g, h, p, sq):
    '''
    Solve for x in h = g^x mod p given a prime p.
    If p is not prime, you shouldn't use BSGS anyway.
    '''
    N = sq+1  # phi(p) is p-1 if p is prime

    # Store hashmap of g^{1...m} (mod p). Baby step.
    tbl = {pow(g, i, p): i for i in range(N)}

    # Precompute via Fermat's Little Theorem
    c = pow(g, N * (p - 2), p)

    # Search for an equivalence in the table. Giant step.
    for j in range(N):
        y = (h * pow(c, j, p)) % p
        if y in tbl:
            return j * N + tbl[y]

    # Solution not found
    return None

e = 3
n = 12460877288564028727335358383983114542341731051548022154034572491197792306193631973075953054981914244972901364570026538015436620745240063350590274031644056900432709397316305570897203361086754488845958051126465417658968484281328161365661685893889073543245641885219392835341114971676623000455528550121577059201133263120601958976737603233507194269119045288269691908582132306697727786774654514376870525616655205178159918358857865468390016722443872424371236141894314463542566640524517054586357683087662030214815870012212922169583417159962678976416791080548477646303068353009493394710675105136107796547980740025506715311541
c = 4683476596663001825247982301062378592756857982494246980845577998029644028328158048968785736050888709448237425623166946564575774714946821670098821718445224449809907661379791032835834481948814136760697211745028547127222748394760728524163799506384994952602189886585863786326503423002332579249219642710049598165618734058809809967276044001444034396622966899395504922903793796145449014308431273541802709584724358107944445464029059231563995531284398954558536929263711798340934522981579419900012792165843985417112792785658660787778391089209155010351570330771153316983518695389221747975968707090258928792946129208568273891850

# c = e^FLAG % n

# binary search for the square root
target = n-1

first = 0
last = target
while(first <= last):
    mid = (first + last) // 2
    mSq = mid**2
    if mSq == target:
        print('case')
        break
    elif target < mSq:
        last = mid - 1
    else:
        first = mid + 1	

print(bsgs(e, c, n, mid))
