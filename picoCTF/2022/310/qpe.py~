def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def main():
    p = 161749429556222116848076898175890045343695020811889789310642406072981974418226816737510451819428124725100350873709857018958059747985259589286894156774147750021081677541626407361407441784517046578136001286376035902065460778342842546096957253478986039046139131214800852488780530340489359699975599920445244425139
    q = 125394311779340487791199901162026557051461614906795011223163560710629908216596754081059720549497028275825348843320403065744238218804275718152634944895327127037260388923111346398615163063784803748287612455648597681602167244281188176484278415540213107535193439007749748790124920127045193879513120171063349588317

    e = 65537
    c = 9278173516578431997880064779343178955209041085950649006761882406919480446548484048297746046169398378347003565901396909214767639919525204479182178950973893854214493663094791356431702037759145748094709219752767153964298128180779114221371406719209912843631220869991911883034243218367832866570766467833669949503446032136976624632491421620711890936280110668377532256028533088294598885271864460615079960919404679955451835969410511981264687427878333961897608650541435320684269093732631129457090523414461579612563147320873328024968983867156385188107690835686332964037803362790415052677118392808216696282685130540055268450854

    # compute n
    n = p * q

    # Compute phi(n)
    phi = (p - 1) * (q - 1)

    # Compute modular inverse of e
    gcd, a, b = egcd(e, phi)
    d = a

    print( "n:  " + str(d) );

    # Decrypt ciphertext
    pt = pow(c, d, n)
    print( "pt: " + str(pt) )

if __name__ == "__main__":
    main()
